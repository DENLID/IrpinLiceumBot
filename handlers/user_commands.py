from aiogram.filters import Command, CommandStart, CommandObject, or_f
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot, F
from motor.core import AgnosticDatabase as MDB

from filters.filters import IsAdminChat, IsMsAdmin, IsAdmin, CheckArg
import keyboards.keyboards as keyboards
from utils.utils import get_user_class
import config


router = Router()


@router.message(CommandStart(), CheckArg(None))
async def start(message: Message, db: MDB) -> None:
    print(message.chat.id)
    id = int(message.chat.id)

    if await db.users.count_documents({"_id": id}) == 0:
        await db.users.insert_one(
    {
        "_id": int(message.chat.id),
        "username": message.from_user.username,
        "airalert": "never",
        "tags": []
    })

    await message.answer(text="""
–ü—Ä–∏–≤—ñ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
—ñ—Ä–ø—ñ–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ2!
–©–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é
–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É üëá
""", reply_markup = keyboards.start_kb)


@router.message(Command('menu'))
async def menu(message: Message):
    await send_menu(message, "command")

async def send_menu(message, ftype):
    text = """
<b>–ú–µ–Ω—é</b>
"""
    if ftype == "call":
        await message.message.edit_text(text=text, reply_markup=keyboards.menu_kb)
    elif ftype == "command":
        await message.answer(text=text, reply_markup=keyboards.menu_kb)

@router.message(Command('help'))
async def help(message: Message):
    await send_help(message, "command")

async def send_help(message, ftype: str):
    text = "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å"
    if ftype == "command":
        await message.answer(text, reply_markup = keyboards.help_kb_command)
    elif ftype == "call":
        await message.message.edit_text(text, reply_markup = keyboards.help_kb_menu)
    
    
@router.message(Command('ms'), IsMsAdmin())
async def ms(message: Message, db: MDB, state: FSMContext):
    await send_ms(message=message, db=db, state=state, ftype="command")

async def send_ms(message, db: MDB, state: FSMContext, ftype: str):
    try:
        id = message.chat.id
    except:
        id = message.message.chat.id

    user = await db.users.find_one({"_id": id})
    user_class = get_user_class(user)

    data = await state.get_data()

    def df(data_ce):
        try:
            return data[data_ce]
        except:
            return "üö´"

    text = f"""
<b>–†–µ–¥–∞–∫—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ –∫–ª–∞—Å—ñ {user_class}.</b>

<b>1. –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤ –≤ –∫–ª–∞—Å—ñ:</b> {df("students_number")}
<b>2. –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ –∫–ª–∞—Å—ñ:</b> {df("ms_number")}
<b>3. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–æ—Ä–∏—Ö —ñ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö:</b> {df("ms_number_hv")}
<b>4. –í—ñ–¥—Å—É—Ç–Ω—ñ:</b> {df("ms")}

–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:"""

    if ftype == "command":
        await message.answer(text, reply_markup=keyboards.ms_kb)
    elif ftype == "call":
        await message.message.edit_text(text, reply_markup=keyboards.ms_kb)


@router.message(Command('ms_xlsx'))
async def ms_xlsx(message: Message):
    await message.answer_document(document=FSInputFile(config.path_ms), caption="–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ —à–∫–æ–ª—ñ")
    
@router.message(Command('news'), or_f(IsAdminChat(), IsAdmin()))
async def news(message: Message, bot: Bot, command: CommandObject, db: MDB):
    text = command.args
    tag = text.split()[0]

    if tag == "all":
        users = db.users.find({})
        exist = 1
    else:
        users = db.users.find({"tags": {"$in": [tag]}})
        exist = await db.users.count_documents({"tags": {"$in": [tag]}})

    if exist != 0:
        async for user in users:
            try:
                await bot.send_message(chat_id=user["_id"], text=text.replace(tag, "", 1))
            except:
                pass
        await message.answer(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ ‚úÖ")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–µ–≥–æ–º <code>{tag}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå")

@router.message(Command('ban'), or_f(IsAdminChat(), IsAdmin()))
async def ban(message: Message, command: CommandObject, db: MDB):
    args = command.args.split()
    chat_id = int(args[0])

    user_exist = await db.users.find_one({"_id": chat_id})
    if user_exist != None:
        username = user_exist["username"]
        await db.ban_list.insert_one({
            "_id": id,
            "username": username
        })
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID: <code>{chat_id}</code> —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–∏–π ‚úÖ")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID: <code>{chat_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚ùå")
        
@router.message(Command('unban'), or_f(IsAdminChat(), IsAdmin()))
async def ban(message: Message, command: CommandObject, db: MDB):
    args = command.args.split()
    chat_id = int(args[0])

    user_exist = await db.users.find_one({"_id": chat_id})
    if user_exist != None:
        username = user_exist["username"]
        await db.ban_list.delete_one({
            "_id": chat_id,
            "username": username
        })
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID: <code>{chat_id}</code> —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π ‚úÖ")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID: <code>{chat_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚ùå")


@router.message(Command('add_tag'), or_f(IsAdminChat(), IsAdmin()))
async def add_tag(message: Message, command: CommandObject, db: MDB):
    args = command.args.split()
    identifier = args[0]
    tag = args[1]

    if identifier.isdigit():
        chat_id = int(identifier)
        user = await db.users.find_one({"_id": chat_id})
    else:
        username = identifier.lstrip('@')
        user = await db.users.find_one({"username": username})

    if user != None:
        await db.users.update_one({"_id": user["_id"]}, {"$push": {"tags": tag}})
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–≤ —Ç–µ–≥ <code>{tag}</code> ‚úÖ")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚ùå")

@router.message(Command('remove_tag'), or_f(IsAdminChat(), IsAdmin()))
async def delete_tag(message: Message, command: CommandObject, db: MDB):
    args = command.args.split()
    identifier = args[0]
    tag = args[1]

    if identifier.isdigit():
        user = await db.users.find_one({"_id": int(identifier)})
    else:
        username = identifier.lstrip('@')
        user = await db.users.find_one({"username": username})

    if user != None:
        await db.users.update_one({"_id": user["_id"]}, {"$pull": {"tags": tag}})
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–≤ —Ç–µ–≥ <code>{tag}</code> ‚úÖ")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚ùå")

@router.message(Command('info'), or_f(IsAdminChat(), IsAdmin()))
async def delete_tag(message: Message, command: CommandObject, db: MDB):
    args = command.args.split()
    identifier = args[0]

    if identifier.isdigit():
        user = await db.users.find_one({"_id": int(identifier)})
    else:
        username = identifier.lstrip('@')
        user = await db.users.find_one({"username": username})

    if user != None:
        await message.answer(f"""
–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
ID: <code>{user["_id"]}</code>
username: @{user["username"]}
airalert: {user["airalert"]}
tags: {user["tags"]}
""")
    else:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π ‚ùå")

@router.message(Command('getmyid'))
async def getmyid(message: Message):
    await message.answer(f"""
–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥—ñ: <code>{message.from_user.id}</code>
–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç –∞–π–¥—ñ: <code>{message.chat.id}</code>""")  

@router.message(Command('register_student'))
async def register_student(message: Message):
    await message.answer("–í —Ä–æ–∑—Ä–æ–±—Ü—ñ üõ†")

@router.message(CommandStart(), CheckArg("backpack_badge"))
async def start_badge(message: Message, db: MDB, state: FSMContext):
    await message.answer("""
üíõ –ü—Ä–∏–≤—ñ—Ç, —É—á–Ω—ñ! üíô

üåü –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–ª–∞–≥–æ–¥—ñ–π–Ω—É –∞–∫—Ü—ñ—é! –í—ñ–¥—Ç–µ–ø–µ—Ä —É –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∏–∫—Ä–∞—Å–∏—Ç–∏ —Å–≤—ñ–π —Ä—é–∫–∑–∞–∫ —è—Å–∫—Ä–∞–≤–∏–º–∏ —Ç–∞ —Å—Ç–∏–ª—å–Ω–∏–º–∏ –∑–Ω–∞—á–∫–∞–º–∏.

üåà –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–∏–±—É—Ç–∫—É –ø—ñ–¥–µ –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É –ó–°–£. –¶–µ –Ω–µ –ª–∏—à–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑—Ä–æ–±–∏—Ç–∏ —Å–≤—ñ–π —Ä—é–∫–∑–∞–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º, –∞–ª–µ —ñ —à–∞–Ω—Å –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–±—Ä—É —Å–ø—Ä–∞–≤—É!

üì≤ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∏–¥–±–∞—Ç–∏ –∑–Ω–∞—á–∫–∏ –±—É–¥–µ –≤ –Ω–∞—à–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É —Ç–∞ –∑–≤'—è–∑–∞–≤—à–∏—Å—å –∑ –∞–¥–º—ñ–Ω–∞–º–∏.

üìÖ –ó–∞–±—Ä–∞—Ç–∏ —Å–≤—ñ–π –∑–Ω–∞—á–æ–∫ –º–æ–∂–Ω–∞ –±—É–¥–µ —É –ø–æ–Ω–µ–¥—ñ–ª–æ–∫, –∑ 10:00 –¥–æ 14:00. –ó–∞–ø—Ä–æ—à—É—î–º–æ –≤—Å—ñ—Ö –±–∞–∂–∞—é—á–∏—Ö –¥–æ–ª—É—á–∏—Ç–∏—Å—è!

–†–∞–∑–æ–º –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üíõüíô
""", reply_markup=keyboards.buy_badge_kb)

@router.message(Command('confirm_person'))
async def confirm_person(message: Message):
    await send_confirm_person(message)

async def send_confirm_person(message):
    try:
        await message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏", reply_markup=keyboards.confirm_person_kb)
    except:
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏", reply_markup=keyboards.confirm_person_kb)