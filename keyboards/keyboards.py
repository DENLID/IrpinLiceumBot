from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

def check_mark(str, data):
    if str == data:
        return "‚úÖ"
    else:
        return ""

badge_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ó–∞–º–æ–≤–∏—Ç–∏', url="https://t.me/irpin_liceum_bot?start=backpack_badge")]])
buy_badge_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí¨ –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–∞–º–∏ üí¨", callback_data="comm")]])

back_menu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="menu")]])
back_details = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="details")]])
back_help = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="help")]])
back_ms = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="ms")]])

back_details_button = [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="details")]
back_menu_button = [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data="menu")]

start_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text = '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é',
            callback_data='menu'
        )
    ]
])

menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="üí¨ –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–∞–º–∏ üí¨", 
            callback_data="comm"
        )
    ],
    [
        InlineKeyboardButton(
            text="üö® –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏ üö®", 
            callback_data="airalert"
        )
    ],
    [
        InlineKeyboardButton(
            text="üõ† –î–æ–ø–æ–º–æ–≥–∞ üõ†", 
            callback_data="help"
        ),
        InlineKeyboardButton(
            text="üì≤ –î–æ–¥–∞—Ç–∫–æ–≤–æ üì≤",
            callback_data="details"
        )
    ]
])

details_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="üìï –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ñ –ø—ñ–¥—Ä—É—á–Ω–∏–∫–∏ üìï", 
            callback_data="books"
        )
    ],
    [
        InlineKeyboardButton(
            text="üîî –†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ üîî",
            callback_data="dzvinki"
        )
    ],
    back_menu_button
])

comm_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="–Ø –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ",
            callback_data="comm_help"
        )
    ],
    back_menu_button
])

help_kb_command = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞', callback_data="help_command")
    ],
    [
        InlineKeyboardButton(text='–ß–æ–º—É –Ω–∞ –º–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏?', callback_data="help_zvazok")
    ]
])

help_kb_menu = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞', callback_data="help_command")
    ],
    [
        InlineKeyboardButton(text='–ú–µ–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∞–¥–º—ñ–Ω–∏', callback_data="help_zvazok")
    ],
    back_menu_button
])

def airalert_kb_func(data):
    airalert_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"–ù—ñ–∫–æ–ª–∏ {check_mark('never', data)}", callback_data="airalert_never")
        ],
        [
            InlineKeyboardButton(text=f"–í —à–∫—ñ–ª—å–Ω–∏–π —á–∞—Å {check_mark('st', data)}", callback_data="airalert_st")
        ],
        [
            InlineKeyboardButton(text=f"–ó–∞–≤–∂–¥–∏ {check_mark('always', data)}", callback_data="airalert_always")
        ],
        back_menu_button
    ])
    return airalert_kb


class MsCallback(CallbackData, prefix="ms"):
    action: str
    class_letter: str
    class_number: int
    class_student: int
    present_students: int
    ms_number_hv: int
    ms_students: str



def ms_confirm_kb(class_letter, class_number, class_student, present_students, ms_number_hv, ms_students):
    ms_tf_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–¢–∞–∫, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ', callback_data=MsCallback(action="ms_accept",
                                                                                        class_letter=class_letter, class_number=class_number,
                                                                                        class_student=class_student, present_students=present_students,
                                                                                        ms_number_hv=ms_number_hv, ms_students=ms_students).pack())
        ],
        [
            InlineKeyboardButton(text='–ù—ñ, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå', callback_data="ms_decline")
        ]
    ])
    return ms_tf_kb

to_comm_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="üí¨ –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω–∞–º–∏ üí¨", 
            callback_data="comm"
        )
    ],
])

def book_subject_kb(user):
    class_num = int(user["class"].split('-')[0])

    items = [
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥. –ú–æ–≤–∞",
        "–£–∫—Ä. –ú–æ–≤–∞", "–£–∫—Ä. –õ—ñ—Ç.",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ",
        "–§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞"
    ]

    if class_num >= 2:
        items.remove("–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ")
        items.extend(["–û–±—Ä. –ú–∏—Å.", "–ú—É–∑. –ú–∏—Å."])

    if class_num >= 3:
        items.append("–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")

    if class_num >= 5:
        items.extend(["–Ü—Å—Ç–æ—Ä—ñ—è", "–ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤.", "–û—Å–Ω. –ó–¥–æ—Ä."])

    if class_num >= 6:
        items.remove("–ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤.")
        items.extend(["–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è", "–ë—ñ–æ–ª–æ–≥—ñ—è"])

    if class_num >= 7:
        items.remove("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        items.extend(["–ê–ª–≥–µ–±—Ä–∞", "–ì–µ–æ–º–µ—Ç—Ä—ñ—è", "–•—ñ–º—ñ—è"])

    if class_num >= 8:
        items.remove("–û–±—Ä. –ú–∏—Å.")
        items.remove("–ú—É–∑. –ú–∏—Å.")
        items.append("–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ")
    
    builder = InlineKeyboardBuilder()
    [builder.button(text=item, callback_data="comming") for item in items]
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="details")
    l = [3]*round(len(items)/3)
    l[len(l)-1] -= 1
    builder.adjust(*l)

    return builder.as_markup()


ms_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="1",
            callback_data="ms_1"
        ),
        InlineKeyboardButton(
            text="2", 
            callback_data="ms_2"
        )
    ],
    [
        InlineKeyboardButton(
            text="3", 
            callback_data="ms_3"
        ),
        InlineKeyboardButton(
            text="4", 
            callback_data="ms_4"
        )
    ],
    [
        InlineKeyboardButton(
            text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ ‚úÖ", 
            callback_data="ms_accept"
        )
    ]
])

confirm_person_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(
            text="Email",
            callback_data="confirm_person_email"
        )
    ],
    [
        InlineKeyboardButton(
            text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", 
            callback_data="comming"
        )
    ]
])
