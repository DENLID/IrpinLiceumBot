from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram import Router, Bot
from pytz import timezone
from datetime import datetime
from pymongo import MongoClient
import json

from register import register
from update_info import update_info_ms
from states import Communication
import keyboards
import config

bot = Bot(config.bot_token, parse_mode="HTML")
router = Router()

cluster = MongoClient(config.mongo_api)
users = cluster.ILdb.users
ban_list = cluster.ILdb.ban_list


@router.channel_post()
async def airalert_handler(message: Message):
    if message.chat.id == config.channel_all_to:
        ukraine_time = timezone('Europe/Kiev')
        dt = datetime.now(ukraine_time)
        weekday = dt.weekday()
        
        if weekday != 5 and weekday != 6 and datetime(dt.year, dt.month, dt.day, 8, 0, tzinfo=ukraine_time) <= dt <= datetime(dt.year, dt.month, dt.day, 18, 40, tzinfo=ukraine_time):
            for u in users.find({ "$or": [{"airalert": "st"}, {"airalert": "always"}]}):
                await message.copy_to(u["_id"]) # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            await message.copy_to(config.channel_to) # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª
        else:
            for u in users.find({"airalert": "always"}):
                await message.copy_to(u["_id"])
    

@router.message(CommandStart())
async def start(message: Message):
    print(message.chat.id)
    await message.answer(text="""
–ü—Ä–∏–≤—ñ—Ç, —è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
—ñ—Ä–ø—ñ–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é ‚Ññ2!
–©–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é
–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –∑–Ω–∏–∑—É üëá
""", reply_markup = keyboards.start_kb)
    register(message)


@router.message(Command('menu'))
async def menu(message: Message):
    await send_menu(message, "command")

async def send_menu(message, ftype):
    text = """
<b>–ú–µ–Ω—é</b>
"""
    if ftype == "call":
        await message.message.edit_text(text=text, reply_markup=keyboards.menu_kb)
    elif ftype == "command":
        await message.answer(text=text, reply_markup=keyboards.menu_kb)

@router.message(Command('help'))
async def help(message: Message):
    await help_message(message, "command")

async def help_message(message, ftype):
    if ftype == "command":
        await message.answer("""
–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å
""", reply_markup = keyboards.help_kb_command)
    elif ftype == "call":
        await message.message.edit_text("""
–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —è–∫–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å
""", reply_markup = keyboards.help_kb_menu)
    
    
@router.message(Command('ms'))
async def ms(message: Message):
    for username in config.msw_admins:
        if username == message.from_user.username:
            await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Form, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ –≤–∞—à–æ–º—É –∫–ª–∞—Å—ñ.", 
reply_markup=keyboards.ms_kb)

@router.message(Command('ms_xlsx'))
async def ms_xlsx(message: Message):
    await message.answer_document(document=FSInputFile("ms.xlsx"), caption="–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ —à–∫–æ–ª—ñ")
    
@router.message(Command('news'))
async def news(message: Message, state: FSMContext):
    await state.set_state(Communication.news_state)
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ –æ—Ç—Ä–∏–º–∞—é—Ç—å –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")

@router.message(Command('ban'))
async def ban(message: Message, state: FSMContext):
    id = int(message.text.split(maxsplit=1)[1])
    username = users.find_one({"_id": id})["username"]
    ban_list.insert_one({
        "_id": id,
        "username": username
    })
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")

@router.message(Communication.news_state)
async def news_state_func(message: Message):
    for username in config.msw_admins:
        if username == message.from_user.username:
            for u in users.find({}):
                try:
                    await bot.send_message(chat_id=u["_id"], text=message.text)
                except:
                    pass
    
async def send_to_admin(message):
    await message.forward(config.admin_group)
    sent = await message.forward(message.chat.id)
    await sent.delete()
    if sent.forward_from == None:
        await message.answer("""
–£ –≤–∞—Å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö 
<b>–ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å —ñ –±–µ–∑–ø–µ–∫–∞ 
(–∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ—Å—Ç—å)</b> –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è 
–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏–±—Ä–∞–Ω–æ <b>–ù—ñ—Ö—Ç–æ</b>.
–¢–æ–º—É –∞–¥–º—ñ–Ω–∏ –Ω–µ –∑–º–æ–∂—É—Ç—å –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.
""")

async def wad_message(message):
    webdata = message.web_app_data.data
    data = json.loads(webdata)
    await message.answer(f"""
–ö–ª–∞—Å: {data["class_number"]} - {data["class_letter"]}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤ –≤ –∫–ª–∞—Å—ñ: {data["students_number"]}
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–∏—Å—É—Ç–Ω—ñ—Ö –≤ –∫–ª–∞—Å—ñ: {int(data["students_number"])-int(data["ms_number"])}
–í—ñ–¥—Å—É—Ç–Ω—ñ: {data["ms"]}
""")
    update_info_ms("ms.xlsx", data["class_letter"], int(data["class_number"]), data["students_number"], int(data["students_number"])-int(data["ms_number"]), data["ms"])


@router.message(Communication.mess)
async def handle_text(message: Message):
    def ibl():
        for bl in ban_list.find({}):
            if message.chat.id == bl["_id"]:
                return True
    if message.web_app_data == None:
        if ibl() != True:
            await send_to_admin(message)
        else:
            await message.answer("""
–í–∏ –æ—Ç—Ä–∏–≤–∞–ª–∏ –±–∞–Ω, —Ç–æ–º—É –Ω–µ –º–æ–∂–µ—Ç–µ 
–Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
""")
    else:   
        await wad_message(message)

@router.message()
async def handle_text(message: Message):
    if message.web_app_data == None:
        if message.reply_to_message is not None and message.chat.id == config.admin_group:
            await message.copy_to(message.reply_to_message.forward_from.id)
    else:
        await wad_message(message)