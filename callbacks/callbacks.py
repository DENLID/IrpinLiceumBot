from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from motor.core import AgnosticDatabase as MDB

from handlers.user_commands import send_menu, help_message
from utils.states import Communication
from update_info.update_info import update_info_ms
from keyboards.keyboards import MsCallback
import keyboards.keyboards as keyboards
import config


router = Router()


@router.callback_query(MsCallback.filter(F.action == "ms_accept"))
async def ms_accept_callback(call: CallbackQuery, callback_data: MsCallback):
    update_info_ms(callback_data.class_letter, callback_data.class_number, 
                   callback_data.class_student, callback_data.present_students, 
                   callback_data.ms_number_hv, callback_data.ms_students)
    await call.message.edit_text("–°–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π ‚úÖ")

@router.callback_query()
async def query(call: CallbackQuery, state: FSMContext, db: MDB):
    if call.data == "menu":
        await send_menu(call, "call")
    if call.data == "comm":
        await state.set_state(Communication.mess)
        await call.message.edit_text(text="""
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
–∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é. –Ø–∫—â–æ –≤–∞–º
–ø—Ä–æ—Ç—è–≥–æ–º 2 –≥–æ–¥–∏–Ω –Ω—ñ—á–æ–≥–æ –Ω–µ
–≤—ñ–¥–ø–æ–≤—ñ–ª–∏, —Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å
–∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëáüëáüëá""", reply_markup=keyboards.back_menu)
            
    if call.data == "help":
        await help_message(call, "call")  
    if call.data == "help_zvazok":
        await call.message.edit_text(text="""
<b><i>–ß–æ–º—É –º–µ–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –∞–¥–º—ñ–Ω–∏?</i></b> 

1. –ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏–≤—Å—è –Ω–∞ —Ç–µ—Ö–Ω—ñ–π—á–Ω—ñ–π 
–ø–µ—Ä–µ—Ä–≤—ñ. –ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ 
–ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—É –ø–µ—Ä–µ—Ä–≤—É.

2. –°—Ç–∞–≤—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –∑–±—ñ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 
–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–µ —Ä–∞–∑.
                                     
<b>–Ø–∫—â–æ —Ü–µ –≤–∞–º –Ω–µ –¥–æ–ø–æ–º–æ–≥–ª–æ, —Ç–æ 
–Ω–∞–ø–∏—à—ñ—Ç—å —Å—é–¥–∏: @denlid_uwu</b>
""", reply_markup=keyboards.back_help)
    if call.data == "help_command":
        await call.message.edit_text(text="""
<b><i>–í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞</i></b>
        
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - –ú–µ–Ω—é
/help - –î–æ–ø–æ–º–æ–≥–∞
""", reply_markup=keyboards.back_help)

    l = {
        "never": "<b>–Ω–µ</b> –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", 
        "st": "–æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è <b>–≤ —à–∫—ñ–ª—å–Ω–∏–π —á–∞—Å</b>", 
        "always": "<b>–∑–∞–≤–∂–¥–∏</b> –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
    }

    if call.data == "air_alert":
        user = await db.users.find_one({"_id": call.message.chat.id})
        print(user["airalert"])
        await call.message.edit_text(text=f"""
–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 
–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
/–≤—ñ–¥–±—ñ—é. –ù–∞–¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤–∏ 
{l[user["airalert"]]}""", reply_markup=keyboards.airalert_kb_func(user["airalert"]))
    for i in ["never", "st", "always"]:
        if call.data == f"airalert_{i}":
            await db.users.update_one({"_id": call.message.chat.id}, {"$set": {"airalert": i}})
            user = await db.users.find_one({"_id": call.message.chat.id})
            await call.message.edit_text(text=f"""
–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 
–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤—ñ—Ç—Ä—è–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏
/–≤—ñ–¥–±—ñ—é. –ù–∞–¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –≤–∏ 
{l[user["airalert"]]}""", reply_markup=keyboards.airalert_kb_func(user["airalert"]))

    if call.data == "ms_decline":
        await call.message.edit_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É Form, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º—É –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —É—á–Ω—ñ–≤ –≤ –≤–∞—à–æ–º—É –∫–ª–∞—Å—ñ.", 
reply_markup=keyboards.ms_kb)

    if call.data == "comming":
        await call.answer("–í —Ä–æ–∑—Ä–æ–±—Ü—ñ", show_alert=True)

